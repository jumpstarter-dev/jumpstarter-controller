{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$defs": {
    "port": {
      "type": "integer",
      "minimum": 0,
      "maximum": 65535
    },
    "ingress": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Whether to enable Ingress for the gRPC endpoint"
        },
        "class": {
          "type": "string",
          "description": "IngressClass to use for the gRPC endpoint"
        }
      }
    },
    "route": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Whether to enable OpenShift Router for the gRPC endpoint"
        }
      }
    },
    "PrefixedClaimOrExpression": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "claim": {
          "type": "string"
        },
        "prefix": {
          "type": "string"
        },
        "expression": {
          "type": "string"
        }
      },
      "oneOf": [
        {
          "required": [ "prefix", "claim" ]
        },
        {
          "required": [ "prefix", "expression" ]
        }
      ]
    },
    "ClaimOrExpression": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "claim": {
          "type": "string"
        },
        "expression": {
          "type": "string"
        }
      },
      "oneOf": [
        {
          "required": [ "claim" ]
        },
        {
          "required": [ "expression" ]
        }
      ]
    },
    "JWTAuthenticator": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "issuer": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "url": {
              "type": "string"
            },
            "discoveryURL": {
              "type": "string"
            },
            "certificateAuthority": {
              "type": "string"
            },
            "audiences": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "audienceMatchPolicy": {
              "type": "string",
              "enum": [ "MatchAny" ]
            }
          }
        },
        "claimValidationRules": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "claim": {
                "type": "string"
              },
              "requiredValue": {
                "type": "string"
              },
              "expression": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            }
          }
        },
        "claimMappings": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "username": {
              "$ref": "#/$defs/PrefixedClaimOrExpression"
            },
            "groups": {
              "$ref": "#/$defs/PrefixedClaimOrExpression"
            },
            "uid": {
              "$ref": "#/$defs/ClaimOrExpression"
            },
            "extra": {
              "type": "array",
              "items": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "key": {
                    "type": "string"
                  },
                  "valueExpression": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "userValidationRules": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "expression": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            }
          }
        }
      }
    }
  },
  "required": [ "image", "imagePullPolicy" ],
  "additionalProperties": false,
  "properties": {
    "enabled": {
      "type": "boolean",
      "description": "Whether to enable jumpstarter controller"
    },
    "authenticationConfig": {
      "type": "string"
    },
    "config": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "provisioning": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          }
        },
        "authentication": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "internal": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "prefix": {
                  "type": "string"
                }
              }
            },
            "jwt": {
              "type": "array",
              "description": "External OIDC authentication, see https://kubernetes.io/docs/reference/access-authn-authz/authentication/#using-authentication-configuration for documentation",
              "items": {
                "$ref": "#/$defs/JWTAuthenticator"
              }
            }
          }
        },
        "grpc": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "keepalive": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "minTime": {
                  "type": "string",
                  "description": "The minimum amount of time a client should wait before sending a keepalive ping"
                },
                "permitWithoutStream": {
                  "type": "boolean",
                  "description": "Whether to allow keepalive pings even when there are no active streams(RPCs)"
                }
              }
            }
          }
        }
      }
    },
    "namespace": {
      "type": "string",
      "description": "Namespace where the controller will be deployed, defaults to global.namespace"
    },
    "image": {
      "type": "string",
      "description": "Image for the controller"
    },
    "tag": {
      "type": "string",
      "description": "Image tag for the controller"
    },
    "imagePullPolicy": {
      "type": "string",
      "description": "Image pull policy for the controller"
    },
    "global": {
      "type": "object",
      "description": "Global parameters",
      "properties": {
        "baseDomain": {
          "type": "string",
          "description": "Base domain to construct the FQDN for the service endpoints"
        },
        "metrics": {
          "type": "object",
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "grpc": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "hostname": {
          "type": "string",
          "description": "Hostname for the controller to use for the controller gRPC"
        },
        "routerHostname": {
          "type": "string",
          "description": "Hostname for the controller to use for the controller gRPC"
        },
        "endpoint": {
          "type": "string",
          "description": "The endpoints are passed down to the services to know where to announce the endpoints to the clients"
        },
        "routerEndpoint": {
          "type": "string",
          "description": "The endpoints are passed down to the services to know where to announce the endpoints to the clients"
        },
        "ingress": {
          "$ref": "#/$defs/ingress"
        },
        "route": {
          "$ref": "#/$defs/route"
        },
        "nodeport": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "enabled": {
              "type": "boolean"
            },
            "port": {
              "$ref": "#/$defs/port"
            },
            "routerPort": {
              "$ref": "#/$defs/port"
            }
          }
        },
        "mode": {
          "enum": [ "ingress", "route" ]
        },
        "tls": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "enabled": {
              "type": "boolean"
            },
            "secret": {
              "type": "string"
            },
            "controllerCertSecret": {
              "type": "string",
              "description": "Secret containing the TLS certificate/key for the gRPC controller endpoint"
            },
            "routerCertSecret": {
              "type": "string",
              "description": "Secret containing the TLS certificate/key for the gRPC router endpoints"
            },
            "port": {
              "$ref": "#/$defs/port",
              "description": "Port to use for the gRPC endpoints Ingress or Route, this can be useful for ingress routers on non-standard ports"
            },
            "mode": {
              "enum": [ "passthrough", "reencrypt" ],
              "description": "TLS mode for gRPC endpoints"
            }
          }
        }
      }
    }
  }
}
